    #include "robin_hood.h"
    #include <boost/unordered_map.hpp>
    #include <boost/container/flat_map.hpp>
    #include <chrono>
    #include <iostream>


        auto boost_map = boost::unordered_map<int, AtomicGridBlock>{};
        auto boost_flat_map = boost::container::flat_map<int, AtomicGridBlock>{};
        auto robin_map = robin_hood::unordered_map<int, AtomicGridBlock>{};
        auto robin_map_flat = robin_hood::unordered_flat_map<int, AtomicGridBlock>{};
        auto robin_map_node = robin_hood::unordered_node_map<int, AtomicGridBlock>{};
        auto clock = std::chrono::high_resolution_clock{};

        int num_values = 10;
        int num_tries = 1'000'000;

        boost_map.reserve(num_values);
        boost_flat_map.reserve(num_values);
        robin_map.reserve(num_values);
        robin_map_flat.reserve(num_values);
        robin_map_node.reserve(num_values);

        double average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                boost_map.insert_or_assign(i, AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP});
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Assigning map: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                boost_flat_map.insert_or_assign(i, AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP});
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Flat Assigning map: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map.insert_or_assign(i, AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP});
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin Assigning map: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map_flat.insert_or_assign(i, AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP});
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin flat Assigning map: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map_node.insert_or_assign(i, AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP});
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin node Assigning map: " << average_time << std::endl;
        average_time = 0;

        printf("\n");

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                boost_map[i] = AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP};
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Assigning map values: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                boost_flat_map[i] = AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP};
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Flat Assigning map values: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map[i] = AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP};
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin Assigning map values: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map_flat[i] = AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP};
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin flat Assigning map values: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                robin_map_node[i] = AtomicGridBlock{BlockTypes::ArmorBlock,Rotation::UP};
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin node Assigning map values: " << average_time << std::endl;
        average_time = 0;

        printf("\n");

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                volatile auto value = boost_map[i];
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Accessing map items: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                volatile auto value = boost_flat_map[i];
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Flat Accessing map items: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                volatile auto value = robin_map[i];
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin Accessing map items: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                volatile auto value = robin_map_flat[i];
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin flat Accessing map items: " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (int i = 0; i < num_values; i++) {
                volatile auto value = robin_map_node[i];
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin node Accessing map items: " << average_time << std::endl;
        average_time = 0;

        printf("\n");

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (auto const &imap: boost_map) {
                volatile auto value = imap.first;
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost Parsing values " << average_time << std::endl;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (auto const &imap: boost_flat_map) {
                volatile auto value = imap.first;
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Boost flat Parsing values " << average_time << std::endl;

        average_time = 0;
        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (auto const &imap: robin_map) {
                volatile auto value = imap.first;
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin Parsing values " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (auto const &imap: robin_map_flat) {
                volatile auto value = imap.first;
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin flat Parsing values " << average_time << std::endl;
        average_time = 0;

        for (int tries = 0; tries < num_tries; tries++) {
            auto delta = clock.now();
            for (auto const &imap: robin_map_node) {
                volatile auto value = imap.first;
            }
            average_time += std::chrono::duration_cast<std::chrono::nanoseconds>(clock.now() - delta).count();
        }
        average_time /= num_tries;

        std::cout << "Robin node Parsing values " << average_time << std::endl;
        average_time = 0;
        robin_map_node.clear();

        Boost Assigning map: 97.6231
        Boost Flat Assigning map: 81.5749
        Robin Assigning map: 78.3706
        Robin flat Assigning map: 78.0674
        Robin node Assigning map: 83.2515

        Boost Assigning map values: 94.9787
        Boost Flat Assigning map values: 70.6717
        Robin Assigning map values: 72.1327
        Robin flat Assigning map values: 78.4117
        Robin node Assigning map values: 72.2376

        Boost Accessing map items: 92.6653
        Boost Flat Accessing map items: 66.1965
        Robin Accessing map items: 97.8291
        Robin flat Accessing map items: 76.2864
        Robin node Accessing map items: 69.6545

        Boost Parsing values 27.0577
        Boost flat Parsing values 20.1237
        Robin Parsing values 56.5982
        Robin flat Parsing values 66.0968
        Robin node Parsing values 52.5279

        Process finished with exit code 0
