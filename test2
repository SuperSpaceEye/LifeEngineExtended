auto num_tries = 100'000'000;

    volatile bool flag1 = false;
    volatile bool flag2 = false;
    volatile bool flag3 = false;
    volatile bool flag4 = false;
    volatile bool flag5 = false;
    volatile bool flag6 = false;
    volatile bool flag7 = false;
    volatile bool flag8 = false;
    volatile bool flag9 = false;

    auto point = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < num_tries; i++) {
        volatile int a = 10;
    }
    auto end_point = std::chrono::high_resolution_clock::now();

    point = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < num_tries; i++) {
        volatile int a = 10;
    }
    end_point = std::chrono::high_resolution_clock::now();
    std::cout << "No flags: " << std::chrono::duration_cast<std::chrono::nanoseconds>(end_point - point).count() / float(num_tries) << std::endl;

    point = std::chrono::high_resolution_clock::now();
    for (int i = 0; i < num_tries; i++) {
        volatile int a = 10;
        if (flag1) {a *= 10;}
        if (flag2) {a *= 10;}
        if (flag3) {a *= 10;}
        if (flag4) {a *= 10;}
        if (flag5) {a *= 10;}
        if (flag6) {a *= 10;}
        if (flag7) {a *= 10;}
        if (flag8) {a *= 10;}
        if (flag9) {a *= 10;}
    }
    end_point = std::chrono::high_resolution_clock::now();
    std::cout << "With flags: " << std::chrono::duration_cast<std::chrono::nanoseconds>(end_point - point).count() / float(num_tries) << std::endl;